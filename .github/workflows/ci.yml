name: Continuous Integration

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  test-typescript:
    name: TypeScript Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        id: npm-ci
        run: npm ci

      - name: Check Format
        id: npm-format-check
        run: npm run format:check

      - name: Lint
        id: npm-lint
        run: npm run lint

      - name: Test
        id: npm-ci-test
        run: npm run ci-test

  # Once all tests have been completed,
  # Run the local actions

  test-action-echo:
    name: local action mode - echo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: test
        id: test-action
        uses: ./
        with:
          mode: echo
          echo: 'Hello there! General Kenobi!!'
          table-name: 'test-table'
          aws-region: 'test-region'
        env:
          # https://github.com/actions/toolkit/blob/master/docs/action-debugging.md
          ACTIONS_STEP_DEBUG: true

      - name: Produce JSON array
        id: make-array
        run: |
          # Wrap the whole assignment in single quotes so the inner " don't need escaping
          echo 'myarr=["one","two","three", "four", "five", "six"]' >> $GITHUB_OUTPUT

      - name: Print first and second element
        run: |
          # Now you can index directly without ever seeing backslashes
          echo "### FIRST ELEMENT"
          echo "First element is: ${{ fromJSON(steps.make-array.outputs.myarr)[0] }}"

          echo "### SECOND ELEMENT"
          echo "Second element is: ${{ fromJSON(steps.make-array.outputs.myarr)[1] }}"

      - name: Print all elements individually
        run: |
          echo "### RESERIALIZED"
          echo "${{ toJSON(fromJSON(steps.make-array.outputs.myarr)) }}"

          echo "### CONTENTS"
          arr=("${{ fromJSON(steps.make-array.outputs.myarr) }}")
          # Dump the raw array contents
          echo "Raw arr: ${arr[@]}"
          echo "Array has ${#arr[@]} items"
          for i in "${!arr[@]}"; do
            echo "  [${i}] = ${arr[$i]}"
          done

      - name: Slice JSON array with Python
        id: adapt
        shell: python
        run: |
          import os, json
          # inline the JSON array directly into Python
          ids = ${{ toJSON(fromJSON(steps.make-array.outputs.myarr)) }}

          # single-element picks
          first_id  = ids[0]
          second_id = ids[1]

          # a sub-range slice
          middle_ids = ids[1:4]
          last_id = ids[-1]

          # emit them as step outputs
          with open(os.environ["GITHUB_OUTPUT"], "a") as ghout:
              ghout.write(f"first_id={first_id}\n")
              ghout.write(f"second_id={second_id}\n")
              ghout.write(f"middle_ids={json.dumps(middle_ids)}\n")
              ghout.write(f"last_id={last_id}\n")

      - name: Validate sliced outputs
        run: |
          echo "First ID: ${{ steps.adapt.outputs.first_id }}"
          echo "Second ID: ${{ steps.adapt.outputs.second_id }}"
          echo "Middle IDs: ${{ steps.adapt.outputs.middle_ids }}"
          echo "Last ID: ${{ steps.adapt.outputs.last_id }}"

  # test-action-provision:
  #   name: local action mode - provision
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       id: checkout
  #       uses: actions/checkout@v4

  #     - name: test
  #       id: test-action
  #       uses: ./
  #       with:
  #         mode: provision
  #         table-name: 'test-table'
  #         aws-region: 'test-region'

  # placholder-job:
  #   name: simple placeholder job
  #   needs: test-action-provision
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Hello world!!
  #       run: |
  #         uuid=$(uuidgen)
  #         echo $uuid

  # test-action-release:
  #   name: local action mode - release
  #   needs: [test-action-provision, placholder-job]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       id: checkout
  #       uses: actions/checkout@v4

  #     - name: test
  #       id: test-action
  #       uses: ./
  #       with:
  #         mode: release
  #         table-name: 'test-table'
  #         aws-region: 'test-region'

  # # NOTE: when ready, this will be tested properly in a cron
  # test-action-refresh:
  #   name: local action mode - refresh
  #   needs: [test-action-provision, placholder-job, test-action-release]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout
  #       id: checkout
  #       uses: actions/checkout@v4

  #     - name: test
  #       id: test-action
  #       uses: ./
  #       with:
  #         mode: refresh
  #         table-name: 'test-table'
  #         aws-region: 'test-region'
